.TH  getlock  1 " 25 Jan 2025"

.SH NAME
 
.P
getlock - lock files and run a program or script.
.SH COPYRIGHT
 
.P
getlock and libUseful are (C) 2010 Colum Paget. They are released under the GPL so you may do anything with them that the GPL allows. Email: colums.projects@gmail.com 
.SH DISCLAIMER
 
.P
This is free software. It comes with no guarentees and I take no responsiblity if it makes your computer explode or opens a portal to the demon dimensions, or does anything.
.SH SYNOPSIS
 
.P
getlock [options] <lock file> [lock file] ["command line"]
.SH DESCRIPTION
 
.P
getlock is a utility that locks files using \(aqlockf\(aq style kernel-locks, and then optionally runs a program. The main use of this is to prevent two copies of a program running at the same time, or to prevent programs from accessing the same resource at the same time. It can fork itself into the background while holding a lock, so that it can be used in shell scripts. It has a lot of options to seize locks, only run a program after a certain interval, lock multiple files, etc, etc.
.SH OPTIONS
 
.br
 
.TP
.B -a <seconds>
 Abandon running task, killall subprocesses and exit after <seconds>
 
.br
 
.TP
.B -b
 Fork into background when got lock
 
.br
 
.TP
.B -d
 delete lockfile when done
 
.br
 
.TP
.B -n
 \(aqnohup\(aq, ignore SIGHUP
 
.br
 
.TP
.B -nohup
 ignore SIGHUP
 
.br
 
.TP
.B -w
 wait for lock (default is do not wait)
 
.br
 
.TP
.B -t <n>
 timeout <n> secs on wait (default is wait forever if -w used)
 
.br
 
.TP
.B -i <n>
 interval between runs. Defauts to seconds, suffix with \(aqm\(aq for minutes, \(aqh\(aq for hours, \(aqd\(aq for days.
 
.br
 
.TP
.B -s
 SAFE MODE, do not write pid into file
 
.br
 
.TP
.B -C
 Close on exec, this prevents lockfiles being inherited by the child process.
 
.br
 
.TP
.B -D
 Debug. Print what you\(aqre doing.
 
.br
 
.TP
.B -R
 Restart program if it exits.
 
.br
 
.TP
.B -q <n>
 Restart interval. Milliseconds delay between restart attempts.
 
.br
 
.TP
.B -S
 Silent. No error/info/debug messages.
 
.br
 
.TP
.B -L
 Send error/info/debug messages to syslog.
 
.br
 
.TP
.B -syslog
 Send error/info/debug messages to syslog.
 
.br
 
.TP
.B -F
 Run specified program if can\(aqt get lock
 
.br
 
.TP
.B -N
 NO PROGRAM, just lock files, use with -w
 
.br
 
.TP
.B -X
 execute program even if lock fails!
 
.br
 
.TP
.B -g <n>
 Gracetime, wait <n> secs before doing kills
 
.br
 
.TP
.B -k
 Send SIGTERM to lockfile owner
 
.br
 
.TP
.B -K
 Send SIGKILL (kill -9) to lockfile owner
 
.br
 
.TP
.B -P
 \(aqno new privs\(aq do not allow process escalate privilege
 
.br
 
.TP
.B -nosu
 \(aqno new privs\(aq do not allow process escalate privilege
 
.br
 
.TP
.B -nopriv
 \(aqno new privs\(aq do not allow process escalate privilege
 
.br
 
.TP
.B -U <user>
 Run as user
 
.br
 
.TP
.B -user <user>
 Run as user
 
.br
 
.TP
.B -G <group>
 Run as group
 
.br
 
.TP
.B -group <group>
 Run as group
 
.br
 
.TP
.B -v
 print version
 
.br
 
.TP
.B -version
 print version
 
.br
 
.TP
.B --version
 print version
 
.br
 
.TP
.B -?
 this help
 
.br
 
.TP
.B -h
 this help
 
.br
 
.TP
.B -help
 this help
 
.br
 
.TP
.B --help
 this help
 
.P
The flags -d -s -i -k and -K are positional, lockfiles given before them on the command line will not be affected, those after will be.
.P

.na
.B
\-k
.ad n
.nop and 
.na
.B
\-K
.ad n
.nop only work if the lock file owner has written their pid into the lockfile. Writing the pid is the default behavior, but 
.na
.B
\-s
.ad n
.nop prevents it, and getlock will also refuse to write into files bigger than 25 bytes, as they are too big to only contain a Process ID
.P

.na
.B
\-i
.ad n
.nop specifies an interval of time between runs. It uses the timestamp stored in lockfiles. It will not run until that timestamp, plus the interval, specifies a time that\(aqs in the past. It is a positional lock-file modifier, like 
.na
.B
\-d
.ad n
.nop . Thus it specifies lockfiles that will be used to store a timestamp, and which will be deleted if the run command fails (returns an exit status other than 0). In this way if the command fails, it can be immedialtely tried again. If it succeeds it will not run again until the interval expires.
.P

.na
.B
\-C
.ad n
.nop is used in situations where you want to allow child processes to be launched without holding a lock. Normally, when running a program or script, one wants to hold a lock file until not only the program has exited, but also any child programs that it starts. However, if using a script to launch long-running processes it may not be desirable to hold onto the lock. The 
.na
.B
\-C
.ad n
.nop option sets all lockfiles to be \(aqClose on Exec\(aq, so that only the getlock process is holding those files locked, and when it exits the locks will be released, even if child processes are still running in the background.
.P

.na
.B
\-R
.ad n
.nop restarts the launched program if it exits. This implies getlock will run forever unless the getlock process itself is terminated. The 
.na
.B
\-q
.ad n
.nop option allows specifying a \(aqdwell time\(aq in milliseconds between restarts. Beware of setting this to zero, as a program that fails to startup will be launched over and over, fast as possible, burning up CPU resources.
.SH COMMAND LINE
 
.P
getlock supports multiple lock files on the command line, but only one command. Since many commands will contain spaces to separate their components the command must be wrapped in quotes to prevent it being confused with the lock files.
.P
By default getlock writes it\(aqs process ID and time of locking to the lockfile. This creates a risk of overwriting command files if they become confused with lockfiles. In order to handle such situations getlock will not use lockfiles larger than a certain size, as this implies they are commands to scripts or other datafiles, rather than lockfiles. 
.SH RETURN VALUE 
 
.P
0 on lock, 1 if bad args on the command line, 3 if failed to get lock. Works with bash-style \(aqif\(aq
.SH CHILD PROCESS LOCKS
 
.P
The 
.na
.B
\-C
.ad n
.nop option  is used in situations where you want to allow child processes to be launched without holding a lock. Normally all programs launched by \(aqgetlock\(aq inherit a lock on the file, so that even if getlock exits, any child process should still be holding the lock. When running a program or script one usually wants to hold a lock file until not only the parent program has exited, but also any child programs that it starts. However, if using a script to launch long-running processes it may not be desirable to hold onto the lock. The 
.na
.B
\-C
.ad n
.nop option sets all lockfiles to be \(aqClose on Exec\(aq, so that only the getlock process is holding those files locked, and when it exits the locks will be released, even if child processes are still running.
.SH KILLING LOCKFILE HOLDERS
 
.P
The 
.na
.B
\-k
.ad n
.nop and 
.na
.B
\-K
.ad n
.nop options allow getlock to kill any other programs holding a lock on a lockfile, by sending \(aqkill\(aq to the existing process. These options only work if the lock file owner has written their pid into a file. This file can be any pidfile, although getlock will then write its own pid to that file and lock it. For getlock writing the pid is the default behavior, but 
.na
.B
\-s
.ad n
.nop prevents it.
.SH RUN INTERVAL
 
.P
The 
.na
.B
\-i
.ad n
.nop option prevents a command from running until a timeout has expired. It accepts a suffix of \(aqm\(aq for minutes, \(aqh\(aq for hours or \(aqd\(aq for days. Without a suffix, it assumes the value is seconds. It uses the date stored in the lock file, along with the interval specified on the command-line. getlock will only run programs when the time goes past this combined value. 
.P
However, the program run by getlock MUST RETURN AN EXIT STATUS OF 0. For any other exit status it is assumed the command failed, and the wait interval is cancelled by deleting any lockfiles that the 
.na
.B
\-i
.ad n
.nop option was specified before. In this manner 
.na
.B
\-i
.ad n
.nop is positional like 
.na
.B
\-d
.ad n
.nop , and specifies lockfiles to be deleted if the run command fails. 
.P
This allows trying a command repeatedly, until it succeeds, and then not trying it again until a timeout has expired. This might be used for backups that process when a network comes up, but should only run once a day.
.SH PROGRAM RESTART
 
.P
The 
.na
.B
\-R
.ad n
.nop option restarts a program if it exits. This implies that a getlock launched with this configuration will run forever, unless the getlock process itself is terminated. The 
.na
.B
\-q
.ad n
.nop option allows specifying a number of milliseconds \(aqdwell time\(aq before launching the process again. The default dwell time is 100 milliseconds. Beware of setting this to \(aq0\(aq, as a program that fails to run will attempt restart over and over again, burning up CPU resources.
.SH NO NEW PRIVS
 
.P
The 
.na
.B
\-nosu
.ad n
.nop , 
.na
.B
\-nopriv
.ad n
.nop and 
.na
.B
\-P
.ad n
.nop options are equivalent and all set a flag in the os kernel that prevents any attempt to escalate privildges. This is only supported on linux. If getlock is run with these options then no use of \(aqsu\(aq \(aqsudo\(aq or raising privildges via setuid will work.
.SH EXAMPLES
 
.P
Lock /tmp/file1.lck and /var/lock/file2.lck, then run \(aqecho\(aq
.RS
.EX

getlock /tmp/file1.lck /var/lock/file2.lck "echo Got locks!"
.RE
.EE
.fi
.in
.ad b
.nop  
.P
Lock /tmp/file1.lck, killing any current owner if made to wait more than 5 secs
.RS
.EX

getlock \-k \-w \-g 5 /tmp/file1.lck "echo Got locks!"
.RE
.EE
.fi
.in
.ad b
.nop  
.P
Lock 3 files, killing the current owners of \(aqfile2.lck\(aq and \(aqfile3.lck\(aq and deleting \(aqfile3.lck\(aq when done
.RS
.EX

getlock file1.lck \-k file2.lck \-d file3.lck "echo Got locks!"
.RE
.EE
.fi
.in
.ad b
.nop  
.P
wait till we get a lock on file1.lck (without -w will exit if cannot lock on first try)
.RS
.EX

getlock \-w file1.lck "echo Got locks!"
.RE
.EE
.fi
.in
.ad b
.nop  
.P
wait till we get a lock on file1.lck and /home/colum/MyWork.txt, but DO NOT WRITE A PID INTO /home/colum/MyWork.txt
.RS
.EX

getlock \-w file1.lck \-s /home/colum/MyWork.txt "vi /home/colum/MyWork.txt"
.RE
.EE
.fi
.in
.ad b
.nop  
.P
Don\(aqt run a program, just kill owners of file1.lck and file2.lck
.RS
.EX

getlock \-N \-k file1.lck file2.lck
.RE
.EE
.fi
.in
.ad b
.nop  
.P
Don\(aqt run any program, just wait till we get a lock on file1.lck, then fork into background and hold the lock. 
.RS
.EX

getlock \-N \-w \-b file1.lck
.RE
.EE
.fi
.in
.ad b
.nop  
.P
The above method, of waiting for a lock and then forking into the background and holding that lock, can be used in shell scripts to guard entry into a particular block of code:
.RS
.EX

		if getlock \-b \-N \-w /tmp/file1.lck
		then
			echo "got lock"
			DoStuff
			kill `cat /tmp/file1.lck`
		else
		echo "FAILED TO GET LOCK"
		fi
.RE
.EE
.fi
.in
.ad b
.nop  
.P
Don\(aqt run any program, wait ten secs for lock, and only hold lock for ten secs.
.RS
.EX

getlock \-N \-w \-t 10 \-b file1.lck
.RE
.EE
.fi
.in
.ad b
.nop  
.P
Only run the command if we get a lock on /var/locks/backup.lck and command has not run for 5 days. Note the use of the 
.na
.B
\-d
.ad n
.nop flag to ensure that, if the command fails to run (ssh returns something other than 0) the lockfile will be deleted so the command can be tried again and again until it suceeds.
.RS
.EX

getlock \-i 5d /var/locks/backup.lck "tar \-zcO mydir | ssh backuphost \(aqtar \-zxf \-\(aq"
.RE
.EE
.fi
.in
.ad b
.nop   